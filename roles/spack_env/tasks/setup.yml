---
- name: Get slurm slurm version
  ansible.builtin.shell:
    cmd: "set -o pipefail && sinfo --version | awk '{print $2}'"
    executable: /bin/bash
  register: slurm_ver
  changed_when: slurm_ver.rc == 0

- name: Get system gcc version
  ansible.builtin.shell:
    cmd: "set -o pipefail && gcc --version | awk 'NR==1{print $4}'"
    executable: /bin/bash
  register: gcc_ver
  changed_when: gcc_ver.rc == 0

- name: Check version
  ansible.builtin.pause:
    prompt: "Slurm version is {{ slurm_ver.stdout }} and gcc version is {{ gcc_ver.stdout }}. Do you want to continue?"

- name: Copy spack environment file
  ansible.builtin.template:
    src: "{{ item }}"
    dest: /tmp/{{ item.split('.')[0].split('/')[-1] }}.yml
    mode: '0644'
  with_fileglob:
    - "templates/*.j2"

- name: Spack external find
  ansible.builtin.shell: "source /opt/spack/share/spack/setup-env.sh; spack external find"
  args:
    executable: /usr/bin/bash
  register: external_find_output
  changed_when: external_find_output.rc == 0

- name: Spack env create
  ansible.builtin.shell:
    cmd: "source /opt/spack/share/spack/setup-env.sh; spack env create {{ item.split('.')[0].split('/')[-1] }} /tmp/{{ item.split('.')[0].split('/')[-1] }}.yml"
  with_fileglob:
    - "templates/*.j2"
  args:
    executable: /usr/bin/bash
  register: env_create_output
  changed_when: env_create_output.rc == 0

- name: Spack env concretize & install
  ansible.builtin.shell: "source /opt/spack/share/spack/setup-env.sh; spack -e {{ item.split('.')[0].split('/')[-1] }} install"
  with_fileglob:
    - "templates/*.j2"
  args:
    executable: /usr/bin/bash
  register: env_install_output
  changed_when: env_install_output.rc == 0
